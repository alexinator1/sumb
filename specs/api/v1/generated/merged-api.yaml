openapi: 3.0.3
info:
  title: SUMB System API
  version: 1.0.0
  description: API для системы управления малым бизнессом
servers:
  - url: http://localhost:8080/api/v1
    description: Development server
paths:
  /employees:
    get:
      summary: Список сотрудников
      description: Получить список сотрудников с пагинацией
      tags:
        - Employees
      parameters:
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeListResponse'
    post:
      summary: Создать сотрудника
      description: Создать нового сотрудника
      tags:
        - Employees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmployeeRequest'
      responses:
        '201':
          description: Сотрудник создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          $ref: '#/components/responses/ValidationError'
  /employees/{id}:
    parameters:
      - $ref: '#/components/parameters/IdPathParam'
    get:
      summary: Получить сотрудника по ID
      tags:
        - Employees
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          $ref: '#/components/responses/EmployeeNotFound'
    put:
      summary: Обновить сотрудника
      tags:
        - Employees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmployeeRequest'
      responses:
        '200':
          description: Сотрудник обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          $ref: '#/components/responses/EmployeeNotFound'
    delete:
      summary: Удалить сотрудника
      tags:
        - Employees
      responses:
        '204':
          description: Сотрудник удален
        '404':
          $ref: '#/components/responses/EmployeeNotFound'
components:
  schemas:
    Employee:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Иван Петров
        role:
          type: string
          enum:
            - cashier
            - manager
            - admin
          example: cashier
        phone:
          type: string
          example: '+79161234567'
        createdAt:
          type: string
          format: date-time
          example: '2024-01-15T10:30:00Z'
      required:
        - id
        - name
        - role
        - phone
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer
    EmployeeListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
        pagination:
          $ref: '#/components/schemas/Pagination'
    CreateEmployeeRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: Иван Петров
        role:
          type: string
          enum:
            - cashier
            - manager
            - admin
          example: cashier
        phone:
          type: string
          pattern: ^\+?[1-9]\d{1,14}$
          example: '+79161234567'
      required:
        - name
        - role
        - phone
    ErrorDetail:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
    UpdateEmployeeRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: Иван Петров
        role:
          type: string
          enum:
            - cashier
            - manager
            - admin
          example: manager
        phone:
          type: string
          pattern: ^\+?[1-9]\d{1,14}$
          example: '+79161234567'
      required:
        - name
        - role
        - phone
  parameters:
    PageQueryParam:
      name: page
      in: query
      required: false
      schema:
        type: integer
        default: 1
        minimum: 1
      description: Номер страницы
    LimitQueryParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100
      description: Количество элементов на странице
    IdPathParam:
      name: id
      in: path
      required: true
      schema:
        type: integer
      description: ID ресурса
  responses:
    ValidationError:
      description: Ошибка валидации
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Validation Error
              message:
                type: string
              details:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorDetail'
    EmployeeNotFound:
      description: Сотрудник не найден
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Employee Not Found
              message:
                type: string
                example: Employee with ID 123 not found
    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Resource not found
    InternalError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
