.PHONY: dev dev-back dev-front down logs init-env clean check-env generate-api generate-back generate-back-main generate-front clean-api help

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
OPENAPI_GENERATOR := openapitools/openapi-generator-cli
OPENAPI_SPEC := specs/api/v1/generated/merged-api.yaml
BACK_OUTPUT := back/internal/api/v1/generated
FRONT_OUTPUT := front/src/api/v1/generated

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
include infra/makefiles/modules.mk

REDOCLY_IMAGE := redocly/redocly-cli:latest

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è .env —Ñ–∞–π–ª–∞
init-env:
	@if [ ! -f .env ]; then \
		echo "Creating .env from .env.dist..."; \
		cp .env.dist .env; \
		echo "Please edit .env file with your local values"; \
	else \
		echo ".env already exists"; \
	fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
check-env:
	@if [ ! -f .env ]; then \
		echo "Error: .env file not found. Run 'make init-env' first"; \
		exit 1; \
	fi
	@echo "Environment file check passed!"

# –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
dev: check-env
	docker-compose up

# –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
dev-detached: check-env
	docker-compose up -d

# –¢–æ–ª—å–∫–æ back + –ë–î
dev-back: check-env
	docker-compose up postgres back

# –¢–æ–ª—å–∫–æ front
dev-front: check-env
	docker-compose up front

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
down:
	docker-compose down

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞
stop:
	docker-compose stop

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º volumes
clean:
	docker-compose down -v

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
logs:
	docker-compose logs -f

logs-back:
	docker-compose logs -f back

logs-front:
	docker-compose logs -f front

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞
rebuild: check-env
	docker-compose build --no-cache

rebuild-back: check-env
	docker-compose build back

# –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
status:
	docker-compose ps

# –ë–î –∫–æ–º–∞–Ω–¥—ã
db-shell: check-env
	docker-compose exec postgres psql -U ${DB_USER:-postgres} -d ${DB_NAME:-pos_dev}


merge-openapi:
	@echo "üîß Bundling OpenAPI with Redocly..." 
	@rm -rf ${OPENAPI_SPEC} 
	@docker run --rm -v ${PWD}:/workspace -w /workspace node:18-alpine \
		sh -c "npm install -g @redocly/cli && redocly bundle /workspace/specs/api/v1/openapi.yaml --output $(OPENAPI_SPEC) --ext yaml"
	git add $(OPENAPI_SPEC)
	@echo "‚úÖ OpenAPI bundled and saved to $(OPENAPI_SPEC)"


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ–≥–æ API
generate-api: generate-back generate-front
	@echo "‚úÖ API code generation completed!"


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ–∫–µ–Ω–¥–∞ (Go) - –æ—Å–Ω–æ–≤–Ω–æ–π API + –≤—Å–µ –º–æ–¥—É–ª–∏
generate-back: generate-back-main generate-modules
	@echo "üìù Adding all generated code to git..."
	@git add $(BACK_OUTPUT)/
	@echo "‚úÖ All generated code added to git"
	@echo "‚úÖ Backend generation completed! (Main API + Modules + Common)"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API (–±–µ–∑ –º–æ–¥—É–ª–µ–π) - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
generate-back-main:
	@echo "üîß Preparing generated directory structure..."
	@echo "üßπ Cleaning previous generated code completely..."
	@rm -rf $(BACK_OUTPUT)
	@mkdir -p $(BACK_OUTPUT)
	@echo "‚úÖ Generated directory structure prepared"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ javascript
generate-front:
	@echo "üîß Generating JavaScript client code for Vue 3..."
	@echo "üßπ Cleaning previous generated code..."
	@rm -rf $(FRONT_OUTPUT)
	@mkdir -p $(FRONT_OUTPUT)
	@docker run --rm -v ${PWD}:/local \
		$(OPENAPI_GENERATOR) generate \
		-i /local/$(OPENAPI_SPEC) \
		-g javascript \
		-o /local/$(FRONT_OUTPUT) \
		--additional-properties=\
usePromises=true,\
useES6=true,\
projectName=frontend-api
	@echo "‚úÖ JavaScript client code generated in $(FRONT_OUTPUT)"
	@echo "üìù Adding generated code to git..."
	@git add $(FRONT_OUTPUT)/
	@echo "‚úÖ Generated code added to git"

# –û—á–∏—Å—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
clean-api:
	rm -rf $(BACK_OUTPUT) $(FRONT_OUTPUT)
	@echo "üßπ Generated API code cleaned"

# –í–∞–ª–∏–¥–∞—Ü–∏—è OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
validate-openapi:
	@echo "üîç Validating OpenAPI spec..."
	@docker run --rm -v ${PWD}:/local \
		$(OPENAPI_GENERATOR) validate -i /local/$(OPENAPI_SPEC)
	@echo "‚úÖ OpenAPI spec is valid!"

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
inspect-spec:
	@echo "üîç Inspecting merged OpenAPI spec..."
	@docker run --rm -v ${PWD}:/local \
		$(OPENAPI_GENERATOR) generate \
		-i /local/$(OPENAPI_SPEC) \
		-g openapi-yaml \
		-o /tmp/openapi-merged \
		--skip-overwrite
	@echo "üìÑ First 50 lines of merged spec:"
	@cat /tmp/openapi-merged/openapi/openapi.yaml | head -50
	@echo "..."
	@echo "‚úÖ OpenAPI spec successfully merged all refs"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Swagger UI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
swagger-ui:
	@echo "üìö Opening Swagger UI..."
	@docker run --rm -p 8085:8080 \
		-e SWAGGER_JSON=/tmp/openapi.yaml \
		-v ${PWD}/api/openapi.yaml:/tmp/openapi.yaml \
		swaggerapi/swagger-ui

# –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –≤–∞–ª–∏–¥–∞—Ü–∏—è + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
rebuild-api: validate-openapi clean-api generate-api
	@echo "üéâ API completely rebuilt!"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
front-deps:
	@echo "üì¶ Installing frontend dependencies..."
	cd front && npm install
	@echo "‚úÖ Frontend dependencies installed"

# –ó–∞–ø—É—Å–∫ –±–µ–∫–µ–Ω–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
# dev-back: generate-back
# 	cd back && go run ./cmd/server

# –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏  
# dev-front: generate-front front-deps
# 	cd front && npm run dev

# –¢–µ—Å—Ç—ã –±–µ–∫–µ–Ω–¥–∞
test-back:
	cd back && go test ./...

# –¢–µ—Å—Ç—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
test-front:
	cd front && npm test

# –ú–∏–≥—Ä–∞—Ü–∏–∏
migrate-create:
	@read -p "Enter migration name: " name; \
	docker-compose run --rm migrate create -ext sql -dir /migrations -seq $$name

migrate-up:
	docker-compose run --rm migrate up

migrate-down:
	docker-compose run --rm migrate down

# –ü–æ–º–æ—â—å
help:
	@echo "Available commands:"
	@echo ""
	@echo "Development:"
	@echo "  make dev           - Start full development environment"
	@echo "  make dev-back      - Start only Go backend"
	@echo "  make dev-front     - Start only Vue frontend"
	@echo ""
	@echo "API Generation:"
	@echo "  make generate-api  - Generate code for both backend and frontend"
	@echo "  make generate-back - Generate backend (main API + all modules)"
	@echo "  make generate-back-main - Generate only main API (without modules)"
	@echo "  make generate-front - Generate only TypeScript client code"
	@echo "  make rebuild-api   - Clean, validate and regenerate API"
	@echo "  make validate-openapi - Validate OpenAPI specification"
	@echo "  make inspect-spec  - View merged OpenAPI specification"
	@echo ""
	@echo "Utilities:"
	@echo "  make swagger-ui    - Open Swagger UI for API documentation"
	@echo "  make clean-api     - Remove generated API code"
	@echo "  make front-deps    - Install frontend dependencies"
	@echo "  make test-back     - Run Go tests"
	@echo "  make test-front    - Run Vue tests"
	@echo "  make down          - Stop docker containers"
	@echo "  make logs          - View docker logs"

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
.DEFAULT_GOAL := help
