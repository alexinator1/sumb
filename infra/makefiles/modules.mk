# =============================================================================
# –ú–æ–¥—É–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è API
# =============================================================================

# –ú–∞—Å—Å–∏–≤ –º–æ–¥—É–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ —Å—é–¥–∞)
MODULES := employee sales

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
MODULES_OUTPUT := back/internal/api/v1/generated
MODULES_SPEC_DIR := specs/api/v1/modules
MODULES_GENERATED_FOLDER := 
MODULE_GEN_PATH = $(MODULES_OUTPUT)/$(MODULE)generated

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥—É–ª—è
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make create-module-spec MODULE=employee
create-module-spec:
	@if [ -z "$(MODULE)" ]; then \
		echo "‚ùå Error: MODULE variable is required. Usage: make create-module-spec MODULE=module_name"; \
		echo "Available modules: $(MODULES)"; \
		exit 1; \
	fi
	@echo "üîß Creating full specification for $(MODULE) module..."
	@mkdir -p $(MODULES_SPEC_DIR)/full
	@echo "openapi: 3.0.3" > $(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml
	@echo "info:" >> $(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml
	@echo "  title: $(MODULE) API" >> $(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml
	@echo "  version: 1.0.0" >> $(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml
	@echo "  description: API –¥–ª—è –º–æ–¥—É–ª—è $(MODULE)" >> $(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml
	@echo "" >> $(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml
	@echo "servers:" >> $(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml
	@echo "  - url: http://localhost:8080/api/v1" >> $(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml
	@echo "    description: Development server" >> $(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml
	@echo "" >> $(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml
	@cat $(MODULES_SPEC_DIR)/$(MODULE)-api.yaml >> $(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml
	@echo "‚úÖ Full specification created: $(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml"

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make generate-module MODULE=employee
generate-module:
	@if [ -z "$(MODULE)" ]; then \
		echo "‚ùå Error: MODULE variable is required. Usage: make generate-module MODULE=module_name"; \
		echo "Available modules: $(MODULES)"; \
		exit 1; \
	fi
	@echo "üîß Creating full specification for $(MODULE)..."
	@$(MAKE) create-module-spec MODULE=$(MODULE)
	@echo "üîß Generating $(MODULE) module code..."
	@echo "üßπ Cleaning previous generated code..."
	@rm -rf $(MODULE_GEN_PATH)
	@mkdir -p $(MODULE_GEN_PATH)
	@docker run --rm -v ${PWD}:/local \
		$(OPENAPI_GENERATOR) generate \
		-i /local/$(MODULES_SPEC_DIR)/full/$(MODULE)-full.yaml \
		-g go-server \
		-o /local/$(MODULE_GEN_PATH) \
		--additional-properties=packageName=$(MODULE)generated,enumClassPrefix=true,withGoCodegenComment=true \
		--skip-validate-spec
	@echo "‚úÖ $(MODULE) module code generated in $(MODULES_OUTPUT)/$(MODULE)"
	@echo "üìÅ Moving Go files from go/ subdirectory..."
	@if [ -d "$(MODULE_GEN_PATH)/go" ]; then \
		mv $(MODULE_GEN_PATH)/go/*.go $(MODULE_GEN_PATH)/; \
		rmdir $(MODULE_GEN_PATH)/go; \
		echo "‚úÖ Go files moved to $(MODULE_GEN_PATH)"; \
	fi
	@echo "üßπ Cleaning up generated go.mod file..."
	@if [ -f "$(MODULE_GEN_PATH)/go.mod" ]; then \
		rm $(MODULE_GEN_PATH)/go.mod; \
		echo "‚úÖ Removed separate go.mod file"; \
	fi
	@echo "üßπ Removing non-Go files, main.go and unnecessary directories..."
	@find $(MODULE_GEN_PATH) -name "*.go" -exec basename {} \; | grep -v "main.go" > /tmp/go_files.txt; \
	find $(MODULE_GEN_PATH) -type f ! -name "*.go" -delete; \
	rm -f $(MODULE_GEN_PATH)/main.go; \
	rm -rf $(MODULE_GEN_PATH)/api; \
	rm -rf $(MODULE_GEN_PATH)/.openapi-generator; \
	echo "‚úÖ Removed non-Go files, main.go and unnecessary directories"
	@echo "üìÅ Generated $(MODULE) Go files:"
	@find $(MODULE_GEN_PATH) -name "*.go" | head -10

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –º–∞—Å—Å–∏–≤–∞ MODULES
generate-modules:
	@echo "üîß Generating all modules: $(MODULES)"
	@for module in $(MODULES); do \
		echo "üì¶ Generating module: $$module"; \
		$(MAKE) generate-module MODULE=$$module; \
		echo ""; \
	done
	@echo "‚úÖ All modules generated successfully!"

# –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏
list-modules:
	@echo "üì¶ Available modules:"
	@for module in $(MODULES); do \
		echo "  - $$module ($(MODULES_SPEC_DIR)/$$module-api.yaml)"; \
	done
	@echo ""
	@echo "Usage: make generate-module MODULE=module_name"
	@echo "Example: make generate-module MODULE=employee"

# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –≤ –º–∞—Å—Å–∏–≤ MODULES
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make add-module MODULE=newmodule
add-module:
	@if [ -z "$(MODULE)" ]; then \
		echo "‚ùå Error: MODULE variable is required. Usage: make add-module MODULE=module_name"; \
		exit 1; \
	fi
	@echo "üìù Adding module '$(MODULE)' to MODULES array..."
	@echo "Please add '$(MODULE)' to the MODULES array in infra/makefiles/modules.mk"
	@echo "Current modules: $(MODULES)"
	@echo "New modules should be: $(MODULES) $(MODULE)"
	@echo ""
	@echo "Also create the specification file: $(MODULES_SPEC_DIR)/$(MODULE)-api.yaml"
	@echo "Then run: make generate-module MODULE=$(MODULE)"

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
check-module-specs:
	@echo "üîç Checking module specifications..."
	@for module in $(MODULES); do \
		if [ -f "$(MODULES_SPEC_DIR)/$$module-api.yaml" ]; then \
			echo "‚úÖ $$module: $(MODULES_SPEC_DIR)/$$module-api.yaml"; \
		else \
			echo "‚ùå $$module: $(MODULES_SPEC_DIR)/$$module-api.yaml (missing)"; \
		fi; \
	done

# –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
clean-modules:
	@echo "üßπ Cleaning all generated modules..."
	@for module in $(MODULES); do \
		if [ -d "$(MODULES_OUTPUT)/$$module" ]; then \
			rm -rf $(MODULES_OUTPUT)/$$module; \
			echo "‚úÖ Removed $(MODULES_OUTPUT)/$$module"; \
		fi; \
	done
	@echo "‚úÖ All modules cleaned"

# –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
clean-module-specs:
	@echo "üßπ Cleaning full module specifications..."
	@if [ -d "$(MODULES_SPEC_DIR)/full" ]; then \
		rm -rf $(MODULES_SPEC_DIR)/full; \
		echo "‚úÖ Removed $(MODULES_SPEC_DIR)/full"; \
	fi
	@echo "‚úÖ Module specifications cleaned"

# –ò–∑–≤–ª–µ—á—å –æ–±—â–∏–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É common
extract-common-files:
	@echo "üì¶ Extracting common files to common/ directory..."
	@mkdir -p $(MODULES_OUTPUT)/common
	@# –ë–µ—Ä–µ–º –æ–±—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è (employee)
	@if [ -d "$(MODULES_OUTPUT)/employee" ]; then \
		if [ -f "$(MODULES_OUTPUT)/employee/error.go" ]; then \
			cp $(MODULES_OUTPUT)/employee/error.go $(MODULES_OUTPUT)/common/; \
			echo "‚úÖ Copied error.go to common/"; \
		fi; \
		if [ -f "$(MODULES_OUTPUT)/employee/helpers.go" ]; then \
			cp $(MODULES_OUTPUT)/employee/helpers.go $(MODULES_OUTPUT)/common/; \
			echo "‚úÖ Copied helpers.go to common/"; \
		fi; \
		if [ -f "$(MODULES_OUTPUT)/employee/impl.go" ]; then \
			cp $(MODULES_OUTPUT)/employee/impl.go $(MODULES_OUTPUT)/common/; \
			echo "‚úÖ Copied impl.go to common/"; \
		fi; \
		if [ -f "$(MODULES_OUTPUT)/employee/logger.go" ]; then \
			cp $(MODULES_OUTPUT)/employee/logger.go $(MODULES_OUTPUT)/common/; \
			echo "‚úÖ Copied logger.go to common/"; \
		fi; \
		if [ -f "$(MODULES_OUTPUT)/employee/routers.go" ]; then \
			cp $(MODULES_OUTPUT)/employee/routers.go $(MODULES_OUTPUT)/common/; \
			echo "‚úÖ Copied routers.go to common/"; \
		fi; \
		if [ -f "$(MODULES_OUTPUT)/employee/api.go" ]; then \
			cp $(MODULES_OUTPUT)/employee/api.go $(MODULES_OUTPUT)/common/; \
			echo "‚úÖ Copied api.go to common/"; \
		fi; \
	fi
	@echo "‚úÖ Common files extracted to $(MODULES_OUTPUT)/common"

# –£–¥–∞–ª–∏—Ç—å –æ–±—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –º–æ–¥—É–ª–µ–π
remove-common-from-modules:
	@echo "üßπ Removing common files from modules..."
	@for module in $(MODULES); do \
		if [ -d "$(MODULES_OUTPUT)/$$module" ]; then \
			rm -f $(MODULES_OUTPUT)/$$module/error.go; \
			rm -f $(MODULES_OUTPUT)/$$module/helpers.go; \
			rm -f $(MODULES_OUTPUT)/$$module/impl.go; \
			rm -f $(MODULES_OUTPUT)/$$module/logger.go; \
			rm -f $(MODULES_OUTPUT)/$$module/routers.go; \
			rm -f $(MODULES_OUTPUT)/$$module/api.go; \
			echo "‚úÖ Removed common files from $$module"; \
		fi; \
	done
	@echo "‚úÖ Common files removed from all modules"
