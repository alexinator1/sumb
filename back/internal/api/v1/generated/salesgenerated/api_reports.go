// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * sales API
 *
 * API для модуля sales
 *
 * API version: 1.0.0
 */

package salesgenerated

import (
	"net/http"
	"strings"
)

// ReportsAPIController binds http requests to an api service and writes the service results to the http response
type ReportsAPIController struct {
	service ReportsAPIServicer
	errorHandler ErrorHandler
}

// ReportsAPIOption for how the controller is set up.
type ReportsAPIOption func(*ReportsAPIController)

// WithReportsAPIErrorHandler inject ErrorHandler into controller
func WithReportsAPIErrorHandler(h ErrorHandler) ReportsAPIOption {
	return func(c *ReportsAPIController) {
		c.errorHandler = h
	}
}

// NewReportsAPIController creates a default api controller
func NewReportsAPIController(s ReportsAPIServicer, opts ...ReportsAPIOption) *ReportsAPIController {
	controller := &ReportsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ReportsAPIController
func (c *ReportsAPIController) Routes() Routes {
	return Routes{
		"SalesReportDailyGet": Route{
			"SalesReportDailyGet",
			strings.ToUpper("Get"),
			"/api/v1/sales/report/daily",
			c.SalesReportDailyGet,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the ReportsAPIController
func (c *ReportsAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"SalesReportDailyGet",
			strings.ToUpper("Get"),
			"/api/v1/sales/report/daily",
			c.SalesReportDailyGet,
		},
	}
}



// SalesReportDailyGet - Ежедневный отчет по продажам
func (c *ReportsAPIController) SalesReportDailyGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var dateParam string
	if query.Has("date") {
		param := string(query.Get("date"))

		dateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "date"}, nil)
		return
	}
	result, err := c.service.SalesReportDailyGet(r.Context(), dateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
