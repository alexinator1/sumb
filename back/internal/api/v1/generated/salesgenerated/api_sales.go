// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * sales API
 *
 * API для модуля sales
 *
 * API version: 1.0.0
 */

package salesgenerated

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SalesAPIController binds http requests to an api service and writes the service results to the http response
type SalesAPIController struct {
	service SalesAPIServicer
	errorHandler ErrorHandler
}

// SalesAPIOption for how the controller is set up.
type SalesAPIOption func(*SalesAPIController)

// WithSalesAPIErrorHandler inject ErrorHandler into controller
func WithSalesAPIErrorHandler(h ErrorHandler) SalesAPIOption {
	return func(c *SalesAPIController) {
		c.errorHandler = h
	}
}

// NewSalesAPIController creates a default api controller
func NewSalesAPIController(s SalesAPIServicer, opts ...SalesAPIOption) *SalesAPIController {
	controller := &SalesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SalesAPIController
func (c *SalesAPIController) Routes() Routes {
	return Routes{
		"SalesGet": Route{
			"SalesGet",
			strings.ToUpper("Get"),
			"/api/v1/sales",
			c.SalesGet,
		},
		"SalesPost": Route{
			"SalesPost",
			strings.ToUpper("Post"),
			"/api/v1/sales",
			c.SalesPost,
		},
		"SalesIdGet": Route{
			"SalesIdGet",
			strings.ToUpper("Get"),
			"/api/v1/sales/{id}",
			c.SalesIdGet,
		},
		"SalesReportDailyGet": Route{
			"SalesReportDailyGet",
			strings.ToUpper("Get"),
			"/api/v1/sales/report/daily",
			c.SalesReportDailyGet,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the SalesAPIController
func (c *SalesAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"SalesGet",
			strings.ToUpper("Get"),
			"/api/v1/sales",
			c.SalesGet,
		},
		Route{
			"SalesPost",
			strings.ToUpper("Post"),
			"/api/v1/sales",
			c.SalesPost,
		},
		Route{
			"SalesIdGet",
			strings.ToUpper("Get"),
			"/api/v1/sales/{id}",
			c.SalesIdGet,
		},
		Route{
			"SalesReportDailyGet",
			strings.ToUpper("Get"),
			"/api/v1/sales/report/daily",
			c.SalesReportDailyGet,
		},
	}
}



// SalesGet - Список продаж
func (c *SalesAPIController) SalesGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	result, err := c.service.SalesGet(r.Context(), pageParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SalesPost - Создать продажу
func (c *SalesAPIController) SalesPost(w http.ResponseWriter, r *http.Request) {
	var createSaleRequestParam CreateSaleRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createSaleRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateSaleRequestRequired(createSaleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateSaleRequestConstraints(createSaleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SalesPost(r.Context(), createSaleRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SalesIdGet - Получить продажу по ID
func (c *SalesAPIController) SalesIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "id", Err: err}, nil)
		return
	}
	result, err := c.service.SalesIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SalesReportDailyGet - Ежедневный отчет по продажам
func (c *SalesAPIController) SalesReportDailyGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var dateParam string
	if query.Has("date") {
		param := string(query.Get("date"))

		dateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "date"}, nil)
		return
	}
	result, err := c.service.SalesReportDailyGet(r.Context(), dateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
