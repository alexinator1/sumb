// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * employee API
 *
 * API для модуля employee
 *
 * API version: 1.0.0
 */

package employeegenerated

import (
	"encoding/json"
	"net/http"
	"strings"
)

// EmployeesAPIController binds http requests to an api service and writes the service results to the http response
type EmployeesAPIController struct {
	service EmployeesAPIServicer
	errorHandler ErrorHandler
}

// EmployeesAPIOption for how the controller is set up.
type EmployeesAPIOption func(*EmployeesAPIController)

// WithEmployeesAPIErrorHandler inject ErrorHandler into controller
func WithEmployeesAPIErrorHandler(h ErrorHandler) EmployeesAPIOption {
	return func(c *EmployeesAPIController) {
		c.errorHandler = h
	}
}

// NewEmployeesAPIController creates a default api controller
func NewEmployeesAPIController(s EmployeesAPIServicer, opts ...EmployeesAPIOption) *EmployeesAPIController {
	controller := &EmployeesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the EmployeesAPIController
func (c *EmployeesAPIController) Routes() Routes {
	return Routes{
		"EmployeesGet": Route{
			"EmployeesGet",
			strings.ToUpper("Get"),
			"/api/v1/employees",
			c.EmployeesGet,
		},
		"EmployeesPost": Route{
			"EmployeesPost",
			strings.ToUpper("Post"),
			"/api/v1/employees",
			c.EmployeesPost,
		},
		"EmployeesIdGet": Route{
			"EmployeesIdGet",
			strings.ToUpper("Get"),
			"/api/v1/employees/{id}",
			c.EmployeesIdGet,
		},
		"EmployeesIdPut": Route{
			"EmployeesIdPut",
			strings.ToUpper("Put"),
			"/api/v1/employees/{id}",
			c.EmployeesIdPut,
		},
		"EmployeesIdDelete": Route{
			"EmployeesIdDelete",
			strings.ToUpper("Delete"),
			"/api/v1/employees/{id}",
			c.EmployeesIdDelete,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the EmployeesAPIController
func (c *EmployeesAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"EmployeesGet",
			strings.ToUpper("Get"),
			"/api/v1/employees",
			c.EmployeesGet,
		},
		Route{
			"EmployeesPost",
			strings.ToUpper("Post"),
			"/api/v1/employees",
			c.EmployeesPost,
		},
		Route{
			"EmployeesIdGet",
			strings.ToUpper("Get"),
			"/api/v1/employees/{id}",
			c.EmployeesIdGet,
		},
		Route{
			"EmployeesIdPut",
			strings.ToUpper("Put"),
			"/api/v1/employees/{id}",
			c.EmployeesIdPut,
		},
		Route{
			"EmployeesIdDelete",
			strings.ToUpper("Delete"),
			"/api/v1/employees/{id}",
			c.EmployeesIdDelete,
		},
	}
}



// EmployeesGet - Список сотрудников
func (c *EmployeesAPIController) EmployeesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.EmployeesGet(r.Context(), UNKNOWN_PARAMETER_NAMEParam, UNKNOWN_PARAMETER_NAME2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EmployeesPost - Создать сотрудника
func (c *EmployeesAPIController) EmployeesPost(w http.ResponseWriter, r *http.Request) {
	var createEmployeeRequestParam CreateEmployeeRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createEmployeeRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateEmployeeRequestRequired(createEmployeeRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateEmployeeRequestConstraints(createEmployeeRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EmployeesPost(r.Context(), createEmployeeRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EmployeesIdGet - Получить сотрудника по ID
func (c *EmployeesAPIController) EmployeesIdGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.EmployeesIdGet(r.Context(), UNKNOWN_PARAMETER_NAMEParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EmployeesIdPut - Обновить сотрудника
func (c *EmployeesAPIController) EmployeesIdPut(w http.ResponseWriter, r *http.Request) {
	var updateEmployeeRequestParam UpdateEmployeeRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateEmployeeRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateEmployeeRequestRequired(updateEmployeeRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateEmployeeRequestConstraints(updateEmployeeRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EmployeesIdPut(r.Context(), updateEmployeeRequestParam, UNKNOWN_PARAMETER_NAMEParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EmployeesIdDelete - Удалить сотрудника
func (c *EmployeesAPIController) EmployeesIdDelete(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.EmployeesIdDelete(r.Context(), UNKNOWN_PARAMETER_NAMEParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
